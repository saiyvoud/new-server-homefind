generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid()) @db.VarChar(36)
  isActive     Boolean       @default(true)
  username     String
  phoneNumber  String
  email        String?
  password     String
  profile      String        @default("")
  ban          Boolean       @default(false)
  kyc          Boolean       @default(false)
  role         UserType      @default(user)
  loginversion Int           @default(1)
  createAt     DateTime      @default(now())
  updateAt     DateTime      @updatedAt
  Kyc          Kyc[]
  Order        Order[]
  Review       Review[]
  SaleService  SaleService[]
  Service      Service[]
  Wallet       Wallet[]
}

model Kyc {
  id        String   @id @default(uuid()) @db.VarChar(36)
  isActive  Boolean  @default(true)
  userId    String   @db.VarChar(36)
  firstname String
  lastname  String
  age       Int
  village   String
  district  String
  province  String
  docType   String
  docNo     String
  docImage  String[]
  profile   String
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id           String     @id @default(uuid()) @db.VarChar(36)
  isActive     Boolean    @default(true)
  userId       String     @db.VarChar(36)
  firstname    String     @default("")
  lastname     String     @default("")
  phoneNumber  String     @default("")
  village      String     @default("")
  district     String     @default("")
  province     String     @default("")
  serviceId    String     @db.VarChar(36)
  promotionId  String?    @db.VarChar(36)
  bookingPrice Float
  totalPrice   Float
  paymentId    String     @db.VarChar(36)
  billQR       String
  status       StatusType @default(reserved)
  createAt     DateTime   @default(now())
  updateAt     DateTime   @updatedAt
  payment      Payment    @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  promotion    Promotion? @relation(fields: [promotionId], references: [id])
  service      Service    @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Review       Review[]
}

model Banner {
  id       String   @id @default(uuid()) @db.VarChar(36)
  isActive Boolean  @default(true)
  image    String
  name     String
  link_url String
  isPublic Boolean  @default(true)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Promotion {
  id        String   @id @default(uuid()) @db.VarChar(36)
  isActive  Boolean  @default(true)
  name      String?
  qty       Int
  code      String   @unique
  startTime DateTime
  endTime   DateTime
  isGiven   Boolean  @default(false)
  isUsed    Boolean  @default(false)
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  Order     Order[]
  Wallet    Wallet[]
}

model Payment {
  id          String   @id @default(uuid()) @db.VarChar(36)
  isActive    Boolean  @default(true)
  bankName    String
  accountName String
  accountNo   String
  qr_Image    String
  isPublic    Boolean  @default(true)
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  Order       Order[]
}

model Review {
  id       String   @id @default(uuid()) @db.VarChar(36)
  isActive Boolean  @default(true)
  userId   String   @db.VarChar(36)
  orderId  String   @db.VarChar(36)
  reason   String
  star     Float
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Service {
  id              String       @id @default(uuid()) @db.VarChar(36)
  isActive        Boolean      @default(true)
  posterId        String       @db.VarChar(36)
  categoryId      String       @db.VarChar(36)
  name            String
  village         String
  district        String
  province        String
  priceMonth      Float
  priceYear       Float
  priceCommission Float
  detail          String       @db.Text
  isAllowBooking  Boolean     @default(false)
  currency        currencyType
  view            Int          @default(1)
  isShare         Boolean      @default(false)
  statusId        String       @db.VarChar(36)
  coverImage      String
  images          String[]
  user            User         @relation(fields: [posterId], references: [id], onDelete: Cascade)
  category        Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  status          Status       @relation(fields: [statusId], references: [id], onDelete: Cascade)
  createAt        DateTime     @default(now())
  updateAt        DateTime     @updatedAt
  Order           Order[]
  category        Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [posterId], references: [id], onDelete: Cascade)
  status          Status       @relation(fields: [statusId], references: [id], onDelete: Cascade)
}

model SaleService {
  id         String       @id @default(uuid()) @db.VarChar(36)
  isActive   Boolean      @default(true)
  posterId   String       @db.VarChar(36)
  categoryId String       @db.VarChar(36)
  name       String
  village    String
  district   String
  province   String
  price      Float
  currency   currencyType
  detail     String
  coverImage String
  images     String[]
  statusId   String       @db.VarChar(36)
  createAt   DateTime     @default(now())
  updateAt   DateTime     @updatedAt
  view       Int          @default(1)
  category   Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [posterId], references: [id], onDelete: Cascade)
  status     Status       @relation(fields: [statusId], references: [id], onDelete: Cascade)
}

model Status {
  id          String        @id @default(uuid()) @db.VarChar(36)
  isActive    Boolean       @default(true)
  name        String
  createAt    DateTime      @default(now())
  updateAt    DateTime      @updatedAt
  SaleService SaleService[]
  Service     Service[]
}

model Category {
  id          String        @id @default(uuid()) @db.VarChar(36)
  isActive    Boolean       @default(true)
  title       String
  icon        String
  createAt    DateTime      @default(now())
  updateAt    DateTime      @updatedAt
  showHome    Boolean       @default(false)
  SaleService SaleService[]
  Service     Service[]
}

model Wallet {
  id          String    @id @default(uuid()) @db.VarChar(36)
  isActive    Boolean   @default(true)
  userId      String    @db.VarChar(36)
  promotionId String    @db.VarChar(36)
  status      Boolean   @default(true)
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  promotion   Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id       String   @id @default(uuid()) @db.VarChar(36)
  isActive Boolean  @default(true)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

enum UserType {
  user
  admin
  superadmin
}

enum StatusType {
  reserved
  approvedByAdmin
  approvedByPoster
  inProgress
  bookerConfirm
  posterConfirm
  bookerReviewed
  cancelled
}

enum currencyType {
  KIP
  USD
  THB
}
